// <auto-generated />
using System;
using HealthyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyAPI.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250325175556_NewEntity")]
    partial class NewEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthyAPI.Models.ActivityCatalog", b =>
                {
                    b.Property<string>("ActivityCatalogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityCatalogID");

                    b.ToTable("ActivityCatalog");
                });

            modelBuilder.Entity("HealthyAPI.Models.DailyNote", b =>
                {
                    b.Property<string>("DailyNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActualCalorie")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyTargetCalorie")
                        .HasColumnType("int");

                    b.Property<int>("DailyWeight")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DailyNoteID");

                    b.HasIndex("UserID");

                    b.ToTable("DailyNote");
                });

            modelBuilder.Entity("HealthyAPI.Models.Food", b =>
                {
                    b.Property<string>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Calorie")
                        .HasColumnType("int");

                    b.Property<int>("Carb")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<int>("Gram")
                        .HasColumnType("int");

                    b.Property<string>("PhotoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodID");

                    b.HasIndex("PhotoID");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealEntries", b =>
                {
                    b.Property<string>("MealEntryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DailyNoteID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MealEntryID");

                    b.HasIndex("DailyNoteID");

                    b.HasIndex("MealTypeID");

                    b.ToTable("MealEntries");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealFoods", b =>
                {
                    b.Property<string>("MealFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealEntryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MealFoodID");

                    b.HasIndex("FoodID");

                    b.HasIndex("MealEntryID");

                    b.ToTable("MealFoods");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealRecipes", b =>
                {
                    b.Property<string>("MealRecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealEntryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RecipeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MealRecipeID");

                    b.HasIndex("MealEntryID");

                    b.HasIndex("RecipeID");

                    b.ToTable("MealRecipes");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealTypes", b =>
                {
                    b.Property<string>("MealTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MealTypeID");

                    b.HasIndex("PhotoID");

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("HealthyAPI.Models.Photo", b =>
                {
                    b.Property<string>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoID");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("HealthyAPI.Models.Recipe", b =>
                {
                    b.Property<string>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("SumCalorie")
                        .HasColumnType("real");

                    b.Property<float>("SumCarb")
                        .HasColumnType("real");

                    b.Property<float>("SumFat")
                        .HasColumnType("real");

                    b.Property<float>("SumProtein")
                        .HasColumnType("real");

                    b.HasKey("RecipeID");

                    b.HasIndex("PhotoID");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("HealthyAPI.Models.RecipeFoods", b =>
                {
                    b.Property<string>("RecipeFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RecipeID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecipeFoodID");

                    b.HasIndex("FoodID");

                    b.HasIndex("RecipeID");

                    b.ToTable("RecipeFoods");
                });

            modelBuilder.Entity("HealthyAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BodyFat")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoalWeight")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetCalorie")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhotoID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HealthyAPI.Models.UserActivity", b =>
                {
                    b.Property<string>("UserActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityCatalogID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("DailyNoteID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PhotoID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserActivityID");

                    b.HasIndex("ActivityCatalogID");

                    b.HasIndex("DailyNoteID");

                    b.HasIndex("PhotoID");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthyAPI.Models.DailyNote", b =>
                {
                    b.HasOne("HealthyAPI.Models.User", "User")
                        .WithMany("DailyNotes")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyAPI.Models.Food", b =>
                {
                    b.HasOne("HealthyAPI.Models.Photo", "Photo")
                        .WithMany("Foods")
                        .HasForeignKey("PhotoID");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealEntries", b =>
                {
                    b.HasOne("HealthyAPI.Models.DailyNote", "DailyNote")
                        .WithMany("MealEntries")
                        .HasForeignKey("DailyNoteID");

                    b.HasOne("HealthyAPI.Models.MealTypes", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeID");

                    b.Navigation("DailyNote");

                    b.Navigation("MealType");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealFoods", b =>
                {
                    b.HasOne("HealthyAPI.Models.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodID");

                    b.HasOne("HealthyAPI.Models.MealEntries", "MealEntry")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealEntryID");

                    b.Navigation("Food");

                    b.Navigation("MealEntry");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealRecipes", b =>
                {
                    b.HasOne("HealthyAPI.Models.MealEntries", "MealEntry")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealEntryID");

                    b.HasOne("HealthyAPI.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeID");

                    b.Navigation("MealEntry");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealTypes", b =>
                {
                    b.HasOne("HealthyAPI.Models.Photo", "Photo")
                        .WithMany("MealTypes")
                        .HasForeignKey("PhotoID");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("HealthyAPI.Models.Recipe", b =>
                {
                    b.HasOne("HealthyAPI.Models.Photo", "Photo")
                        .WithMany("Recipes")
                        .HasForeignKey("PhotoID");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("HealthyAPI.Models.RecipeFoods", b =>
                {
                    b.HasOne("HealthyAPI.Models.Food", "Food")
                        .WithMany("RecipeFoods")
                        .HasForeignKey("FoodID");

                    b.HasOne("HealthyAPI.Models.Recipe", "Recipe")
                        .WithMany("RecipeFoods")
                        .HasForeignKey("RecipeID");

                    b.Navigation("Food");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("HealthyAPI.Models.User", b =>
                {
                    b.HasOne("HealthyAPI.Models.Photo", "Photo")
                        .WithMany("Users")
                        .HasForeignKey("PhotoID");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("HealthyAPI.Models.UserActivity", b =>
                {
                    b.HasOne("HealthyAPI.Models.ActivityCatalog", "ActivityCatalog")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityCatalogID");

                    b.HasOne("HealthyAPI.Models.DailyNote", "DailyNote")
                        .WithMany("UserActivities")
                        .HasForeignKey("DailyNoteID");

                    b.HasOne("HealthyAPI.Models.Photo", "Photo")
                        .WithMany("UserActivities")
                        .HasForeignKey("PhotoID");

                    b.Navigation("ActivityCatalog");

                    b.Navigation("DailyNote");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthyAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthyAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthyAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthyAPI.Models.ActivityCatalog", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("HealthyAPI.Models.DailyNote", b =>
                {
                    b.Navigation("MealEntries");

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("HealthyAPI.Models.Food", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("RecipeFoods");
                });

            modelBuilder.Entity("HealthyAPI.Models.MealEntries", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("HealthyAPI.Models.Photo", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("MealTypes");

                    b.Navigation("Recipes");

                    b.Navigation("UserActivities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HealthyAPI.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeFoods");
                });

            modelBuilder.Entity("HealthyAPI.Models.User", b =>
                {
                    b.Navigation("DailyNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
